// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.framework;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ApplicationModule$$ModuleAdapter extends ModuleAdapter<ApplicationModule> {
  private static final String[] INJECTS = { "members/org.anotanota.framework.Activity", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { org.anotanota.framework.ApplicationModule.Dependencies.class, };

  public ApplicationModule$$ModuleAdapter() {
    super(org.anotanota.framework.ApplicationModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, ApplicationModule module) {
    bindings.contributeProvidesBinding("org.anotanota.framework.Application", new ApplicationProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.framework.App$MainThread()/java.util.concurrent.Executor", new MainthreadExecutorProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.framework.App$ApplicationScope()/org.dagger.scope.Scope", new ScopeProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.framework.App$MainThread()/android.os.Handler", new MainLooperProvidesAdapter(module));
    bindings.contributeProvidesBinding("java.util.concurrent.Executor", new ExecutorProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.anotanota.framework.Application>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.anotanota.framework.Application>} and handling creation and
   * preparation of object instances.
   */
  public static final class ApplicationProvidesAdapter extends ProvidesBinding<Application>
      implements Provider<Application> {
    private final ApplicationModule module;

    public ApplicationProvidesAdapter(ApplicationModule module) {
      super("org.anotanota.framework.Application", NOT_SINGLETON, "org.anotanota.framework.ApplicationModule", "application");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.framework.Application>}.
     */
    @Override
    public Application get() {
      return module.application();
    }
  }

  /**
   * A {@code Binding<java.util.concurrent.Executor>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code java.util.concurrent.Executor} and its
   * dependencies.
   *
   * Being a {@code Provider<java.util.concurrent.Executor>} and handling creation and
   * preparation of object instances.
   */
  public static final class MainthreadExecutorProvidesAdapter extends ProvidesBinding<java.util.concurrent.Executor>
      implements Provider<java.util.concurrent.Executor> {
    private final ApplicationModule module;
    private Binding<android.os.Handler> handler;

    public MainthreadExecutorProvidesAdapter(ApplicationModule module) {
      super("@org.anotanota.framework.App$MainThread()/java.util.concurrent.Executor", NOT_SINGLETON, "org.anotanota.framework.ApplicationModule", "mainthreadExecutor");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      handler = (Binding<android.os.Handler>) linker.requestBinding("@org.anotanota.framework.App$MainThread()/android.os.Handler", ApplicationModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(handler);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.util.concurrent.Executor>}.
     */
    @Override
    public java.util.concurrent.Executor get() {
      return module.mainthreadExecutor(handler.get());
    }
  }

  /**
   * A {@code Binding<org.dagger.scope.Scope>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code org.dagger.scope.Scope} and its
   * dependencies.
   *
   * Being a {@code Provider<org.dagger.scope.Scope>} and handling creation and
   * preparation of object instances.
   */
  public static final class ScopeProvidesAdapter extends ProvidesBinding<org.dagger.scope.Scope>
      implements Provider<org.dagger.scope.Scope> {
    private final ApplicationModule module;
    private Binding<Application> app;

    public ScopeProvidesAdapter(ApplicationModule module) {
      super("@org.anotanota.framework.App$ApplicationScope()/org.dagger.scope.Scope", NOT_SINGLETON, "org.anotanota.framework.ApplicationModule", "scope");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      app = (Binding<Application>) linker.requestBinding("org.anotanota.framework.Application", ApplicationModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(app);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.dagger.scope.Scope>}.
     */
    @Override
    public org.dagger.scope.Scope get() {
      return module.scope(app.get());
    }
  }

  /**
   * A {@code Binding<android.os.Handler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.os.Handler>} and handling creation and
   * preparation of object instances.
   */
  public static final class MainLooperProvidesAdapter extends ProvidesBinding<android.os.Handler>
      implements Provider<android.os.Handler> {
    private final ApplicationModule module;

    public MainLooperProvidesAdapter(ApplicationModule module) {
      super("@org.anotanota.framework.App$MainThread()/android.os.Handler", NOT_SINGLETON, "org.anotanota.framework.ApplicationModule", "mainLooper");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.os.Handler>}.
     */
    @Override
    public android.os.Handler get() {
      return module.mainLooper();
    }
  }

  /**
   * A {@code Binding<java.util.concurrent.Executor>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.util.concurrent.Executor>} and handling creation and
   * preparation of object instances.
   */
  public static final class ExecutorProvidesAdapter extends ProvidesBinding<java.util.concurrent.Executor>
      implements Provider<java.util.concurrent.Executor> {
    private final ApplicationModule module;

    public ExecutorProvidesAdapter(ApplicationModule module) {
      super("java.util.concurrent.Executor", NOT_SINGLETON, "org.anotanota.framework.ApplicationModule", "executor");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.util.concurrent.Executor>}.
     */
    @Override
    public java.util.concurrent.Executor get() {
      return module.executor();
    }
  }
}
