// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.framework.drawer;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class NavigationDrawerModule$Dependencies$$ModuleAdapter extends ModuleAdapter<NavigationDrawerModule.Dependencies> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public NavigationDrawerModule$Dependencies$$ModuleAdapter() {
    super(org.anotanota.framework.drawer.NavigationDrawerModule.Dependencies.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public NavigationDrawerModule.Dependencies newModule() {
    return new org.anotanota.framework.drawer.NavigationDrawerModule.Dependencies();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, NavigationDrawerModule.Dependencies module) {
    bindings.contributeProvidesBinding("@org.anotanota.framework.drawer.NavigationDrawer$ViewControler()/org.anotanota.framework.UIViewController", new ViewControllerProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.framework.drawer.NavigationDrawer$Titles()/java.util.List<java.lang.String>", new TitlesProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.anotanota.framework.UIViewController>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.anotanota.framework.UIViewController>} and handling creation and
   * preparation of object instances.
   */
  public static final class ViewControllerProvidesAdapter extends ProvidesBinding<org.anotanota.framework.UIViewController>
      implements Provider<org.anotanota.framework.UIViewController> {
    private final NavigationDrawerModule.Dependencies module;

    public ViewControllerProvidesAdapter(NavigationDrawerModule.Dependencies module) {
      super("@org.anotanota.framework.drawer.NavigationDrawer$ViewControler()/org.anotanota.framework.UIViewController", NOT_SINGLETON, "org.anotanota.framework.drawer.NavigationDrawerModule.Dependencies", "viewController");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.framework.UIViewController>}.
     */
    @Override
    public org.anotanota.framework.UIViewController get() {
      return module.viewController();
    }
  }

  /**
   * A {@code Binding<java.util.List<java.lang.String>>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.util.List<java.lang.String>>} and handling creation and
   * preparation of object instances.
   */
  public static final class TitlesProvidesAdapter extends ProvidesBinding<java.util.List<String>>
      implements Provider<java.util.List<String>> {
    private final NavigationDrawerModule.Dependencies module;

    public TitlesProvidesAdapter(NavigationDrawerModule.Dependencies module) {
      super("@org.anotanota.framework.drawer.NavigationDrawer$Titles()/java.util.List<java.lang.String>", NOT_SINGLETON, "org.anotanota.framework.drawer.NavigationDrawerModule.Dependencies", "titles");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.util.List<java.lang.String>>}.
     */
    @Override
    public java.util.List<String> get() {
      return module.titles();
    }
  }
}
