// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.framework.drawer;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<NavigationDrawerViewController>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code NavigationDrawerViewController} and its
 * dependencies.
 *
 * Being a {@code Provider<NavigationDrawerViewController>} and handling creation and
 * preparation of object instances.
 */
public final class NavigationDrawerViewController$$InjectAdapter extends Binding<NavigationDrawerViewController>
    implements Provider<NavigationDrawerViewController> {
  private Binding<android.support.v7.app.ActionBar> actionBar;
  private Binding<org.anotanota.framework.Navigation> navigation;
  private Binding<Provider<org.anotanota.framework.UIViewController>> viewController;
  private Binding<java.util.List<String>> titles;
  private Binding<android.widget.ListView> drawerView;
  private Binding<android.support.v4.widget.DrawerLayout> drawerLayout;

  public NavigationDrawerViewController$$InjectAdapter() {
    super("org.anotanota.framework.drawer.NavigationDrawerViewController", "members/org.anotanota.framework.drawer.NavigationDrawerViewController", IS_SINGLETON, NavigationDrawerViewController.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    actionBar = (Binding<android.support.v7.app.ActionBar>) linker.requestBinding("android.support.v7.app.ActionBar", NavigationDrawerViewController.class, getClass().getClassLoader());
    navigation = (Binding<org.anotanota.framework.Navigation>) linker.requestBinding("org.anotanota.framework.Navigation", NavigationDrawerViewController.class, getClass().getClassLoader());
    viewController = (Binding<Provider<org.anotanota.framework.UIViewController>>) linker.requestBinding("@org.anotanota.framework.drawer.NavigationDrawer$ViewControler()/javax.inject.Provider<org.anotanota.framework.UIViewController>", NavigationDrawerViewController.class, getClass().getClassLoader());
    titles = (Binding<java.util.List<String>>) linker.requestBinding("@org.anotanota.framework.drawer.NavigationDrawer$Titles()/java.util.List<java.lang.String>", NavigationDrawerViewController.class, getClass().getClassLoader());
    drawerView = (Binding<android.widget.ListView>) linker.requestBinding("@org.anotanota.framework.drawer.NavigationDrawer$View()/android.widget.ListView", NavigationDrawerViewController.class, getClass().getClassLoader());
    drawerLayout = (Binding<android.support.v4.widget.DrawerLayout>) linker.requestBinding("@org.anotanota.framework.drawer.NavigationDrawer$Layout()/android.support.v4.widget.DrawerLayout", NavigationDrawerViewController.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(actionBar);
    getBindings.add(navigation);
    getBindings.add(viewController);
    getBindings.add(titles);
    getBindings.add(drawerView);
    getBindings.add(drawerLayout);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<NavigationDrawerViewController>}.
   */
  @Override
  public NavigationDrawerViewController get() {
    NavigationDrawerViewController result = new NavigationDrawerViewController(actionBar.get(), navigation.get(), viewController.get(), titles.get(), drawerView.get(), drawerLayout.get());
    return result;
  }

}
