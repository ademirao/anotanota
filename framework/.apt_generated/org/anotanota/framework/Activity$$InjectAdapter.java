// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.framework;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<Activity>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code Activity} and its
 * dependencies.
 *
 * Being a {@code Provider<Activity>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<Activity>} and handling injection
 * of annotated fields.
 */
public final class Activity$$InjectAdapter extends Binding<Activity>
    implements Provider<Activity>, MembersInjector<Activity> {
  private Binding<Object[]> mActivityModules;

  public Activity$$InjectAdapter() {
    super("org.anotanota.framework.Activity", "members/org.anotanota.framework.Activity", NOT_SINGLETON, Activity.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    mActivityModules = (Binding<Object[]>) linker.requestBinding("@org.anotanota.framework.App$ActivityModules()/java.lang.Object[]", Activity.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(mActivityModules);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<Activity>}.
   */
  @Override
  public Activity get() {
    Activity result = new Activity();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<Activity>}.
   */
  @Override
  public void injectMembers(Activity object) {
    object.mActivityModules = mActivityModules.get();
  }

}
