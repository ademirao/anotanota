// Code generated by dagger-compiler.  Do not edit.
package org.dagger.scope;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class Scope$ScopeModule$$ModuleAdapter extends ModuleAdapter<Scope.ScopeModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public Scope$ScopeModule$$ModuleAdapter() {
    super(org.dagger.scope.Scope.ScopeModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public Scope.ScopeModule newModule() {
    return new org.dagger.scope.Scope.ScopeModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, Scope.ScopeModule module) {
    bindings.contributeProvidesBinding("org.dagger.scope.Scope", new GetScopeProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.dagger.scope.Scope>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.dagger.scope.Scope>} and handling creation and
   * preparation of object instances.
   */
  public static final class GetScopeProvidesAdapter extends ProvidesBinding<Scope>
      implements Provider<Scope> {
    private final Scope.ScopeModule module;

    public GetScopeProvidesAdapter(Scope.ScopeModule module) {
      super("org.dagger.scope.Scope", NOT_SINGLETON, "org.dagger.scope.Scope.ScopeModule", "getScope");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.dagger.scope.Scope>}.
     */
    @Override
    public Scope get() {
      return module.getScope();
    }
  }
}
