// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.framework.pipeline;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<Pipeline>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code Pipeline} and its
 * dependencies.
 *
 * Being a {@code Provider<Pipeline>} and handling creation and
 * preparation of object instances.
 */
public final class Pipeline$$InjectAdapter extends Binding<Pipeline>
    implements Provider<Pipeline> {
  private Binding<com.google.common.util.concurrent.ListeningExecutorService> service;
  private Binding<org.dagger.scope.Scope> scope;

  public Pipeline$$InjectAdapter() {
    super("org.anotanota.framework.pipeline.Pipeline", "members/org.anotanota.framework.pipeline.Pipeline", NOT_SINGLETON, Pipeline.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    service = (Binding<com.google.common.util.concurrent.ListeningExecutorService>) linker.requestBinding("com.google.common.util.concurrent.ListeningExecutorService", Pipeline.class, getClass().getClassLoader());
    scope = (Binding<org.dagger.scope.Scope>) linker.requestBinding("org.dagger.scope.Scope", Pipeline.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(service);
    getBindings.add(scope);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<Pipeline>}.
   */
  @Override
  public Pipeline get() {
    Pipeline result = new Pipeline(service.get(), scope.get());
    return result;
  }

}
