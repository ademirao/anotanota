// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.pipeline;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ReceiptItemsProducer$$ModuleAdapter extends ModuleAdapter<ReceiptItemsProducer> {
  private static final String[] INJECTS = { "members/org.anotanota.pipeline.ReceiptItemsProducer$Result", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public ReceiptItemsProducer$$ModuleAdapter() {
    super(org.anotanota.pipeline.ReceiptItemsProducer.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public ReceiptItemsProducer newModule() {
    return new org.anotanota.pipeline.ReceiptItemsProducer();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, ReceiptItemsProducer module) {
    bindings.contributeProvidesBinding("java.util.List<org.anotanota.model.ReceiptItem>", new ProduceProvidesAdapter(module));
  }

  /**
   * A {@code Binding<java.util.List<org.anotanota.model.ReceiptItem>>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code java.util.List<org.anotanota.model.ReceiptItem>} and its
   * dependencies.
   *
   * Being a {@code Provider<java.util.List<org.anotanota.model.ReceiptItem>>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProduceProvidesAdapter extends ProvidesBinding<java.util.List<org.anotanota.model.ReceiptItem>>
      implements Provider<java.util.List<org.anotanota.model.ReceiptItem>> {
    private final ReceiptItemsProducer module;
    private Binding<org.anotanota.model.Receipt> receipt;

    public ProduceProvidesAdapter(ReceiptItemsProducer module) {
      super("java.util.List<org.anotanota.model.ReceiptItem>", NOT_SINGLETON, "org.anotanota.pipeline.ReceiptItemsProducer", "produce");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      receipt = (Binding<org.anotanota.model.Receipt>) linker.requestBinding("org.anotanota.model.Receipt", ReceiptItemsProducer.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(receipt);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.util.List<org.anotanota.model.ReceiptItem>>}.
     */
    @Override
    public java.util.List<org.anotanota.model.ReceiptItem> get() {
      return module.produce(receipt.get());
    }
  }
}
