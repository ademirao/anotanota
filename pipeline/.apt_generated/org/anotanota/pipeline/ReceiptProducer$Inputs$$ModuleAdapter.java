// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.pipeline;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ReceiptProducer$Inputs$$ModuleAdapter extends ModuleAdapter<ReceiptProducer.Inputs> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public ReceiptProducer$Inputs$$ModuleAdapter() {
    super(org.anotanota.pipeline.ReceiptProducer.Inputs.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public ReceiptProducer.Inputs newModule() {
    return new org.anotanota.pipeline.ReceiptProducer.Inputs();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, ReceiptProducer.Inputs module) {
    bindings.contributeProvidesBinding("org.anotanota.pipeline.OCR", new GetInLoaderProvidesAdapter(module));
    bindings.contributeProvidesBinding("java.io.File", new GetInputProvidesAdapter(module));
    bindings.contributeProvidesBinding("org.anotanota.model.ReceiptsDataAccess", new GetDaProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.anotanota.pipeline.OCR>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.anotanota.pipeline.OCR>} and handling creation and
   * preparation of object instances.
   */
  public static final class GetInLoaderProvidesAdapter extends ProvidesBinding<OCR>
      implements Provider<OCR> {
    private final ReceiptProducer.Inputs module;

    public GetInLoaderProvidesAdapter(ReceiptProducer.Inputs module) {
      super("org.anotanota.pipeline.OCR", NOT_SINGLETON, "org.anotanota.pipeline.ReceiptProducer.Inputs", "getInLoader");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.pipeline.OCR>}.
     */
    @Override
    public OCR get() {
      return module.getInLoader();
    }
  }

  /**
   * A {@code Binding<java.io.File>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.io.File>} and handling creation and
   * preparation of object instances.
   */
  public static final class GetInputProvidesAdapter extends ProvidesBinding<java.io.File>
      implements Provider<java.io.File> {
    private final ReceiptProducer.Inputs module;

    public GetInputProvidesAdapter(ReceiptProducer.Inputs module) {
      super("java.io.File", NOT_SINGLETON, "org.anotanota.pipeline.ReceiptProducer.Inputs", "getInput");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.io.File>}.
     */
    @Override
    public java.io.File get() {
      return module.getInput();
    }
  }

  /**
   * A {@code Binding<org.anotanota.model.ReceiptsDataAccess>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.anotanota.model.ReceiptsDataAccess>} and handling creation and
   * preparation of object instances.
   */
  public static final class GetDaProvidesAdapter extends ProvidesBinding<org.anotanota.model.ReceiptsDataAccess>
      implements Provider<org.anotanota.model.ReceiptsDataAccess> {
    private final ReceiptProducer.Inputs module;

    public GetDaProvidesAdapter(ReceiptProducer.Inputs module) {
      super("org.anotanota.model.ReceiptsDataAccess", NOT_SINGLETON, "org.anotanota.pipeline.ReceiptProducer.Inputs", "getDa");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.model.ReceiptsDataAccess>}.
     */
    @Override
    public org.anotanota.model.ReceiptsDataAccess get() {
      return module.getDa();
    }
  }
}
