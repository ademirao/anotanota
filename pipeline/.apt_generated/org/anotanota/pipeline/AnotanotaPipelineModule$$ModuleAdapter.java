// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.pipeline;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class AnotanotaPipelineModule$$ModuleAdapter extends ModuleAdapter<AnotanotaPipelineModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { org.dagger.scope.ScopeModule.class, };

  public AnotanotaPipelineModule$$ModuleAdapter() {
    super(org.anotanota.pipeline.AnotanotaPipelineModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public AnotanotaPipelineModule newModule() {
    return new org.anotanota.pipeline.AnotanotaPipelineModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, AnotanotaPipelineModule module) {
    bindings.contributeProvidesBinding("@org.anotanota.pipeline.AnotanotaPipeline$FullPipeline()/org.anotanota.pipeline.framework.Pipeline", new GetProducersProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.anotanota.pipeline.framework.Pipeline>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code org.anotanota.pipeline.framework.Pipeline} and its
   * dependencies.
   *
   * Being a {@code Provider<org.anotanota.pipeline.framework.Pipeline>} and handling creation and
   * preparation of object instances.
   */
  public static final class GetProducersProvidesAdapter extends ProvidesBinding<org.anotanota.pipeline.framework.Pipeline>
      implements Provider<org.anotanota.pipeline.framework.Pipeline> {
    private final AnotanotaPipelineModule module;
    private Binding<org.dagger.scope.Scope> scope;
    private Binding<com.google.common.util.concurrent.ListeningExecutorService> service;

    public GetProducersProvidesAdapter(AnotanotaPipelineModule module) {
      super("@org.anotanota.pipeline.AnotanotaPipeline$FullPipeline()/org.anotanota.pipeline.framework.Pipeline", NOT_SINGLETON, "org.anotanota.pipeline.AnotanotaPipelineModule", "getProducers");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      scope = (Binding<org.dagger.scope.Scope>) linker.requestBinding("org.dagger.scope.Scope", AnotanotaPipelineModule.class, getClass().getClassLoader());
      service = (Binding<com.google.common.util.concurrent.ListeningExecutorService>) linker.requestBinding("com.google.common.util.concurrent.ListeningExecutorService", AnotanotaPipelineModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(scope);
      getBindings.add(service);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.pipeline.framework.Pipeline>}.
     */
    @Override
    public org.anotanota.pipeline.framework.Pipeline get() {
      return module.getProducers(scope.get(), service.get());
    }
  }
}
