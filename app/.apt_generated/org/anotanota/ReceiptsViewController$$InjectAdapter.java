// Code generated by dagger-compiler.  Do not edit.
package org.anotanota;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<ReceiptsViewController>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code ReceiptsViewController} and its
 * dependencies.
 *
 * Being a {@code Provider<ReceiptsViewController>} and handling creation and
 * preparation of object instances.
 */
public final class ReceiptsViewController$$InjectAdapter extends Binding<ReceiptsViewController>
    implements Provider<ReceiptsViewController> {
  private Binding<Provider<android.widget.ListView>> listViewProvider;
  private Binding<Provider<android.widget.TextView>> textViewProvider;
  private Binding<org.anotanota.views.ArrayAdapterHelper> arrayAdapterBuilder;
  private Binding<org.anotanota.model.ReceiptsDataAccess> receiptsDataAccess;
  private Binding<org.anotanota.framework.Navigation> navigation;
  private Binding<java.util.concurrent.Executor> executor;

  public ReceiptsViewController$$InjectAdapter() {
    super("org.anotanota.ReceiptsViewController", "members/org.anotanota.ReceiptsViewController", NOT_SINGLETON, ReceiptsViewController.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    listViewProvider = (Binding<Provider<android.widget.ListView>>) linker.requestBinding("javax.inject.Provider<android.widget.ListView>", ReceiptsViewController.class, getClass().getClassLoader());
    textViewProvider = (Binding<Provider<android.widget.TextView>>) linker.requestBinding("javax.inject.Provider<android.widget.TextView>", ReceiptsViewController.class, getClass().getClassLoader());
    arrayAdapterBuilder = (Binding<org.anotanota.views.ArrayAdapterHelper>) linker.requestBinding("org.anotanota.views.ArrayAdapterHelper", ReceiptsViewController.class, getClass().getClassLoader());
    receiptsDataAccess = (Binding<org.anotanota.model.ReceiptsDataAccess>) linker.requestBinding("org.anotanota.model.ReceiptsDataAccess", ReceiptsViewController.class, getClass().getClassLoader());
    navigation = (Binding<org.anotanota.framework.Navigation>) linker.requestBinding("org.anotanota.framework.Navigation", ReceiptsViewController.class, getClass().getClassLoader());
    executor = (Binding<java.util.concurrent.Executor>) linker.requestBinding("java.util.concurrent.Executor", ReceiptsViewController.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(listViewProvider);
    getBindings.add(textViewProvider);
    getBindings.add(arrayAdapterBuilder);
    getBindings.add(receiptsDataAccess);
    getBindings.add(navigation);
    getBindings.add(executor);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<ReceiptsViewController>}.
   */
  @Override
  public ReceiptsViewController get() {
    ReceiptsViewController result = new ReceiptsViewController(listViewProvider.get(), textViewProvider.get(), arrayAdapterBuilder.get(), receiptsDataAccess.get(), navigation.get(), executor.get());
    return result;
  }

}
