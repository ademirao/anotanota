// Code generated by dagger-compiler.  Do not edit.
package org.anotanota;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class AnotanotaActivityModule$DataAccessScopedEndpoints$$ModuleAdapter extends ModuleAdapter<AnotanotaActivityModule.DataAccessScopedEndpoints> {
  private static final String[] INJECTS = { "members/org.anotanota.DataSourceViewController", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public AnotanotaActivityModule$DataAccessScopedEndpoints$$ModuleAdapter() {
    super(org.anotanota.AnotanotaActivityModule.DataAccessScopedEndpoints.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public AnotanotaActivityModule.DataAccessScopedEndpoints newModule() {
    return new org.anotanota.AnotanotaActivityModule.DataAccessScopedEndpoints();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, AnotanotaActivityModule.DataAccessScopedEndpoints module) {
    bindings.contributeProvidesBinding("@org.anotanota.framework.pager.Pager$Tabs()/org.anotanota.framework.UIViewController", new TabsViewControllersProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.framework.pager.Pager$Titles()/java.util.List<java.lang.String>", new TabsTitlesProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.anotanota.framework.UIViewController>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code org.anotanota.framework.UIViewController} and its
   * dependencies.
   *
   * Being a {@code Provider<org.anotanota.framework.UIViewController>} and handling creation and
   * preparation of object instances.
   */
  public static final class TabsViewControllersProvidesAdapter extends ProvidesBinding<org.anotanota.framework.UIViewController>
      implements Provider<org.anotanota.framework.UIViewController> {
    private final AnotanotaActivityModule.DataAccessScopedEndpoints module;
    private Binding<org.anotanota.framework.pager.PagerAdapter> adapter;
    private Binding<Provider<AddReceiptItemsViewController>> addReceipts;
    private Binding<Provider<ReceiptsItemsViewController>> receiptsItems;
    private Binding<Provider<ReceiptsViewController>> receipts;
    private Binding<Provider<AggregatedProductsViewController>> aggregatedProducts;

    public TabsViewControllersProvidesAdapter(AnotanotaActivityModule.DataAccessScopedEndpoints module) {
      super("@org.anotanota.framework.pager.Pager$Tabs()/org.anotanota.framework.UIViewController", NOT_SINGLETON, "org.anotanota.AnotanotaActivityModule.DataAccessScopedEndpoints", "tabsViewControllers");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      adapter = (Binding<org.anotanota.framework.pager.PagerAdapter>) linker.requestBinding("org.anotanota.framework.pager.PagerAdapter", AnotanotaActivityModule.DataAccessScopedEndpoints.class, getClass().getClassLoader());
      addReceipts = (Binding<Provider<AddReceiptItemsViewController>>) linker.requestBinding("javax.inject.Provider<org.anotanota.AddReceiptItemsViewController>", AnotanotaActivityModule.DataAccessScopedEndpoints.class, getClass().getClassLoader());
      receiptsItems = (Binding<Provider<ReceiptsItemsViewController>>) linker.requestBinding("javax.inject.Provider<org.anotanota.ReceiptsItemsViewController>", AnotanotaActivityModule.DataAccessScopedEndpoints.class, getClass().getClassLoader());
      receipts = (Binding<Provider<ReceiptsViewController>>) linker.requestBinding("javax.inject.Provider<org.anotanota.ReceiptsViewController>", AnotanotaActivityModule.DataAccessScopedEndpoints.class, getClass().getClassLoader());
      aggregatedProducts = (Binding<Provider<AggregatedProductsViewController>>) linker.requestBinding("javax.inject.Provider<org.anotanota.AggregatedProductsViewController>", AnotanotaActivityModule.DataAccessScopedEndpoints.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(adapter);
      getBindings.add(addReceipts);
      getBindings.add(receiptsItems);
      getBindings.add(receipts);
      getBindings.add(aggregatedProducts);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.framework.UIViewController>}.
     */
    @Override
    public org.anotanota.framework.UIViewController get() {
      return module.tabsViewControllers(adapter.get(), addReceipts.get(), receiptsItems.get(), receipts.get(), aggregatedProducts.get());
    }
  }

  /**
   * A {@code Binding<java.util.List<java.lang.String>>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.util.List<java.lang.String>>} and handling creation and
   * preparation of object instances.
   */
  public static final class TabsTitlesProvidesAdapter extends ProvidesBinding<java.util.List<String>>
      implements Provider<java.util.List<String>> {
    private final AnotanotaActivityModule.DataAccessScopedEndpoints module;

    public TabsTitlesProvidesAdapter(AnotanotaActivityModule.DataAccessScopedEndpoints module) {
      super("@org.anotanota.framework.pager.Pager$Titles()/java.util.List<java.lang.String>", NOT_SINGLETON, "org.anotanota.AnotanotaActivityModule.DataAccessScopedEndpoints", "tabsTitles");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.util.List<java.lang.String>>}.
     */
    @Override
    public java.util.List<String> get() {
      return module.tabsTitles();
    }
  }
}
