// Code generated by dagger-compiler.  Do not edit.
package org.anotanota;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<ReceiptsItemsViewController>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code ReceiptsItemsViewController} and its
 * dependencies.
 *
 * Being a {@code Provider<ReceiptsItemsViewController>} and handling creation and
 * preparation of object instances.
 */
public final class ReceiptsItemsViewController$$InjectAdapter extends Binding<ReceiptsItemsViewController>
    implements Provider<ReceiptsItemsViewController> {
  private Binding<android.support.v7.app.ActionBar> actionBar;
  private Binding<org.anotanota.framework.Activity> activity;
  private Binding<android.view.LayoutInflater> layoutInfrater;
  private Binding<Provider<android.widget.ListView>> listViewProvider;
  private Binding<org.anotanota.views.ArrayAdapterHelper> adapterBuilder;
  private Binding<org.anotanota.model.ReceiptItemsDataAccess> dataAccess;
  private Binding<java.util.concurrent.Executor> executor;

  public ReceiptsItemsViewController$$InjectAdapter() {
    super("org.anotanota.ReceiptsItemsViewController", "members/org.anotanota.ReceiptsItemsViewController", NOT_SINGLETON, ReceiptsItemsViewController.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    actionBar = (Binding<android.support.v7.app.ActionBar>) linker.requestBinding("android.support.v7.app.ActionBar", ReceiptsItemsViewController.class, getClass().getClassLoader());
    activity = (Binding<org.anotanota.framework.Activity>) linker.requestBinding("org.anotanota.framework.Activity", ReceiptsItemsViewController.class, getClass().getClassLoader());
    layoutInfrater = (Binding<android.view.LayoutInflater>) linker.requestBinding("android.view.LayoutInflater", ReceiptsItemsViewController.class, getClass().getClassLoader());
    listViewProvider = (Binding<Provider<android.widget.ListView>>) linker.requestBinding("javax.inject.Provider<android.widget.ListView>", ReceiptsItemsViewController.class, getClass().getClassLoader());
    adapterBuilder = (Binding<org.anotanota.views.ArrayAdapterHelper>) linker.requestBinding("org.anotanota.views.ArrayAdapterHelper", ReceiptsItemsViewController.class, getClass().getClassLoader());
    dataAccess = (Binding<org.anotanota.model.ReceiptItemsDataAccess>) linker.requestBinding("org.anotanota.model.ReceiptItemsDataAccess", ReceiptsItemsViewController.class, getClass().getClassLoader());
    executor = (Binding<java.util.concurrent.Executor>) linker.requestBinding("java.util.concurrent.Executor", ReceiptsItemsViewController.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(actionBar);
    getBindings.add(activity);
    getBindings.add(layoutInfrater);
    getBindings.add(listViewProvider);
    getBindings.add(adapterBuilder);
    getBindings.add(dataAccess);
    getBindings.add(executor);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<ReceiptsItemsViewController>}.
   */
  @Override
  public ReceiptsItemsViewController get() {
    ReceiptsItemsViewController result = new ReceiptsItemsViewController(actionBar.get(), activity.get(), layoutInfrater.get(), listViewProvider.get(), adapterBuilder.get(), dataAccess.get(), executor.get());
    return result;
  }

}
