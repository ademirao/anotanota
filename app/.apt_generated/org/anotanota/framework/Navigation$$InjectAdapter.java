// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.framework;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<Navigation>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code Navigation} and its
 * dependencies.
 *
 * Being a {@code Provider<Navigation>} and handling creation and
 * preparation of object instances.
 */
public final class Navigation$$InjectAdapter extends Binding<Navigation>
    implements Provider<Navigation> {
  private Binding<android.support.v4.app.FragmentManager> fragmentManager;

  public Navigation$$InjectAdapter() {
    super("org.anotanota.framework.Navigation", "members/org.anotanota.framework.Navigation", IS_SINGLETON, Navigation.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    fragmentManager = (Binding<android.support.v4.app.FragmentManager>) linker.requestBinding("android.support.v4.app.FragmentManager", Navigation.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(fragmentManager);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<Navigation>}.
   */
  @Override
  public Navigation get() {
    Navigation result = new Navigation(fragmentManager.get());
    return result;
  }

}
