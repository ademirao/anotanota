// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.sqlite;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class SQLiteModule$SQLiteDataAccessModule$$ModuleAdapter extends ModuleAdapter<SQLiteModule.SQLiteDataAccessModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public SQLiteModule$SQLiteDataAccessModule$$ModuleAdapter() {
    super(org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, SQLiteModule.SQLiteDataAccessModule module) {
    bindings.contributeProvidesBinding("org.anotanota.sqlite.SQLiteDataAccessConfig", new GetConfigProvidesAdapter(module));
    bindings.contributeProvidesBinding("org.anotanota.model.ReceiptsDataAccess", new ReceiptsDataAccessProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.content.Context", new ContextProvidesAdapter(module));
    bindings.contributeProvidesBinding("org.anotanota.model.AggregatedProductsDataAccess", new ProductsDataAccessProvidesAdapter(module));
    bindings.contributeProvidesBinding("@javax.inject.Named(value=DataAccessName)/java.lang.String", new GetNameProvidesAdapter(module));
    bindings.contributeProvidesBinding("org.anotanota.model.ReceiptItemsDataAccess", new ItemsDataAccessProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.anotanota.sqlite.SQLiteDataAccessConfig>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<org.anotanota.sqlite.SQLiteDataAccessConfig>} and handling creation and
   * preparation of object instances.
   */
  public static final class GetConfigProvidesAdapter extends ProvidesBinding<SQLiteDataAccessConfig>
      implements Provider<SQLiteDataAccessConfig> {
    private final SQLiteModule.SQLiteDataAccessModule module;

    public GetConfigProvidesAdapter(SQLiteModule.SQLiteDataAccessModule module) {
      super("org.anotanota.sqlite.SQLiteDataAccessConfig", NOT_SINGLETON, "org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule", "getConfig");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.sqlite.SQLiteDataAccessConfig>}.
     */
    @Override
    public SQLiteDataAccessConfig get() {
      return module.getConfig();
    }
  }

  /**
   * A {@code Binding<org.anotanota.model.ReceiptsDataAccess>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code org.anotanota.model.ReceiptsDataAccess} and its
   * dependencies.
   *
   * Being a {@code Provider<org.anotanota.model.ReceiptsDataAccess>} and handling creation and
   * preparation of object instances.
   */
  public static final class ReceiptsDataAccessProvidesAdapter extends ProvidesBinding<org.anotanota.model.ReceiptsDataAccess>
      implements Provider<org.anotanota.model.ReceiptsDataAccess> {
    private final SQLiteModule.SQLiteDataAccessModule module;
    private Binding<SQLiteReceiptsDataAccess> dataAccess;

    public ReceiptsDataAccessProvidesAdapter(SQLiteModule.SQLiteDataAccessModule module) {
      super("org.anotanota.model.ReceiptsDataAccess", NOT_SINGLETON, "org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule", "receiptsDataAccess");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      dataAccess = (Binding<SQLiteReceiptsDataAccess>) linker.requestBinding("org.anotanota.sqlite.SQLiteReceiptsDataAccess", SQLiteModule.SQLiteDataAccessModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(dataAccess);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.model.ReceiptsDataAccess>}.
     */
    @Override
    public org.anotanota.model.ReceiptsDataAccess get() {
      return module.receiptsDataAccess(dataAccess.get());
    }
  }

  /**
   * A {@code Binding<android.content.Context>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<android.content.Context>} and handling creation and
   * preparation of object instances.
   */
  public static final class ContextProvidesAdapter extends ProvidesBinding<android.content.Context>
      implements Provider<android.content.Context> {
    private final SQLiteModule.SQLiteDataAccessModule module;

    public ContextProvidesAdapter(SQLiteModule.SQLiteDataAccessModule module) {
      super("android.content.Context", NOT_SINGLETON, "org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule", "context");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.Context>}.
     */
    @Override
    public android.content.Context get() {
      return module.context();
    }
  }

  /**
   * A {@code Binding<org.anotanota.model.AggregatedProductsDataAccess>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code org.anotanota.model.AggregatedProductsDataAccess} and its
   * dependencies.
   *
   * Being a {@code Provider<org.anotanota.model.AggregatedProductsDataAccess>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProductsDataAccessProvidesAdapter extends ProvidesBinding<org.anotanota.model.AggregatedProductsDataAccess>
      implements Provider<org.anotanota.model.AggregatedProductsDataAccess> {
    private final SQLiteModule.SQLiteDataAccessModule module;
    private Binding<SQLiteAggregatedProductsDataAccess> productsDataAccess;

    public ProductsDataAccessProvidesAdapter(SQLiteModule.SQLiteDataAccessModule module) {
      super("org.anotanota.model.AggregatedProductsDataAccess", NOT_SINGLETON, "org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule", "productsDataAccess");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      productsDataAccess = (Binding<SQLiteAggregatedProductsDataAccess>) linker.requestBinding("org.anotanota.sqlite.SQLiteAggregatedProductsDataAccess", SQLiteModule.SQLiteDataAccessModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(productsDataAccess);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.model.AggregatedProductsDataAccess>}.
     */
    @Override
    public org.anotanota.model.AggregatedProductsDataAccess get() {
      return module.productsDataAccess(productsDataAccess.get());
    }
  }

  /**
   * A {@code Binding<java.lang.String>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.lang.String>} and handling creation and
   * preparation of object instances.
   */
  public static final class GetNameProvidesAdapter extends ProvidesBinding<String>
      implements Provider<String> {
    private final SQLiteModule.SQLiteDataAccessModule module;

    public GetNameProvidesAdapter(SQLiteModule.SQLiteDataAccessModule module) {
      super("@javax.inject.Named(value=DataAccessName)/java.lang.String", NOT_SINGLETON, "org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule", "getName");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.lang.String>}.
     */
    @Override
    public String get() {
      return module.getName();
    }
  }

  /**
   * A {@code Binding<org.anotanota.model.ReceiptItemsDataAccess>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code org.anotanota.model.ReceiptItemsDataAccess} and its
   * dependencies.
   *
   * Being a {@code Provider<org.anotanota.model.ReceiptItemsDataAccess>} and handling creation and
   * preparation of object instances.
   */
  public static final class ItemsDataAccessProvidesAdapter extends ProvidesBinding<org.anotanota.model.ReceiptItemsDataAccess>
      implements Provider<org.anotanota.model.ReceiptItemsDataAccess> {
    private final SQLiteModule.SQLiteDataAccessModule module;
    private Binding<SQLiteReceiptItemsDataAccess> dataAccess;

    public ItemsDataAccessProvidesAdapter(SQLiteModule.SQLiteDataAccessModule module) {
      super("org.anotanota.model.ReceiptItemsDataAccess", NOT_SINGLETON, "org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule", "itemsDataAccess");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      dataAccess = (Binding<SQLiteReceiptItemsDataAccess>) linker.requestBinding("org.anotanota.sqlite.SQLiteReceiptItemsDataAccess", SQLiteModule.SQLiteDataAccessModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(dataAccess);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.model.ReceiptItemsDataAccess>}.
     */
    @Override
    public org.anotanota.model.ReceiptItemsDataAccess get() {
      return module.itemsDataAccess(dataAccess.get());
    }
  }
}
