// Code generated by dagger-compiler.  Do not edit.
package org.anotanota.sqlite;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<SQLiteReceiptsDataAccess>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code SQLiteReceiptsDataAccess} and its
 * dependencies.
 *
 * Being a {@code Provider<SQLiteReceiptsDataAccess>} and handling creation and
 * preparation of object instances.
 */
public final class SQLiteReceiptsDataAccess$$InjectAdapter extends Binding<SQLiteReceiptsDataAccess>
    implements Provider<SQLiteReceiptsDataAccess> {
  private Binding<android.content.Context> context;
  private Binding<SQLiteDataAccessConfig> config;

  public SQLiteReceiptsDataAccess$$InjectAdapter() {
    super("org.anotanota.sqlite.SQLiteReceiptsDataAccess", "members/org.anotanota.sqlite.SQLiteReceiptsDataAccess", NOT_SINGLETON, SQLiteReceiptsDataAccess.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", SQLiteReceiptsDataAccess.class, getClass().getClassLoader());
    config = (Binding<SQLiteDataAccessConfig>) linker.requestBinding("org.anotanota.sqlite.SQLiteDataAccessConfig", SQLiteReceiptsDataAccess.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(context);
    getBindings.add(config);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<SQLiteReceiptsDataAccess>}.
   */
  @Override
  public SQLiteReceiptsDataAccess get() {
    SQLiteReceiptsDataAccess result = new SQLiteReceiptsDataAccess(context.get(), config.get());
    return result;
  }

}
