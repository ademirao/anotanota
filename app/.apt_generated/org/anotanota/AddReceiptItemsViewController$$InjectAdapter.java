// Code generated by dagger-compiler.  Do not edit.
package org.anotanota;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<AddReceiptItemsViewController>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code AddReceiptItemsViewController} and its
 * dependencies.
 *
 * Being a {@code Provider<AddReceiptItemsViewController>} and handling creation and
 * preparation of object instances.
 */
public final class AddReceiptItemsViewController$$InjectAdapter extends Binding<AddReceiptItemsViewController>
    implements Provider<AddReceiptItemsViewController> {
  private Binding<android.content.Context> context;
  private Binding<android.support.v7.app.ActionBar> actionBar;
  private Binding<android.content.res.AssetManager> assets;
  private Binding<Provider<android.widget.ListView>> listView;
  private Binding<android.view.LayoutInflater> layoutInflater;
  private Binding<org.anotanota.model.ReceiptsDataAccess> receiptsDataAccess;
  private Binding<java.util.concurrent.ThreadPoolExecutor> ocrThreadPool;

  public AddReceiptItemsViewController$$InjectAdapter() {
    super("org.anotanota.AddReceiptItemsViewController", "members/org.anotanota.AddReceiptItemsViewController", NOT_SINGLETON, AddReceiptItemsViewController.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", AddReceiptItemsViewController.class, getClass().getClassLoader());
    actionBar = (Binding<android.support.v7.app.ActionBar>) linker.requestBinding("android.support.v7.app.ActionBar", AddReceiptItemsViewController.class, getClass().getClassLoader());
    assets = (Binding<android.content.res.AssetManager>) linker.requestBinding("android.content.res.AssetManager", AddReceiptItemsViewController.class, getClass().getClassLoader());
    listView = (Binding<Provider<android.widget.ListView>>) linker.requestBinding("javax.inject.Provider<android.widget.ListView>", AddReceiptItemsViewController.class, getClass().getClassLoader());
    layoutInflater = (Binding<android.view.LayoutInflater>) linker.requestBinding("android.view.LayoutInflater", AddReceiptItemsViewController.class, getClass().getClassLoader());
    receiptsDataAccess = (Binding<org.anotanota.model.ReceiptsDataAccess>) linker.requestBinding("org.anotanota.model.ReceiptsDataAccess", AddReceiptItemsViewController.class, getClass().getClassLoader());
    ocrThreadPool = (Binding<java.util.concurrent.ThreadPoolExecutor>) linker.requestBinding("@org.anotanota.Anotanota$OCRThread()/java.util.concurrent.ThreadPoolExecutor", AddReceiptItemsViewController.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(context);
    getBindings.add(actionBar);
    getBindings.add(assets);
    getBindings.add(listView);
    getBindings.add(layoutInflater);
    getBindings.add(receiptsDataAccess);
    getBindings.add(ocrThreadPool);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<AddReceiptItemsViewController>}.
   */
  @Override
  public AddReceiptItemsViewController get() {
    AddReceiptItemsViewController result = new AddReceiptItemsViewController(context.get(), actionBar.get(), assets.get(), listView.get(), layoutInflater.get(), receiptsDataAccess.get(), ocrThreadPool.get());
    return result;
  }

}
