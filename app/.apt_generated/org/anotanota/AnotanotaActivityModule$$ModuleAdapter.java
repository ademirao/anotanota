// Code generated by dagger-compiler.  Do not edit.
package org.anotanota;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class AnotanotaActivityModule$$ModuleAdapter extends ModuleAdapter<AnotanotaActivityModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { org.anotanota.sqlite.SQLiteModule.class, org.anotanota.framework.ActivityModule.class, org.anotanota.framework.drawer.NavigationDrawerModule.class, };

  public AnotanotaActivityModule$$ModuleAdapter() {
    super(org.anotanota.AnotanotaActivityModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, true /*complete*/, true /*library*/);
  }

  @Override
  public AnotanotaActivityModule newModule() {
    return new org.anotanota.AnotanotaActivityModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, AnotanotaActivityModule module) {
    bindings.contributeProvidesBinding("@org.anotanota.framework.drawer.NavigationDrawer$ViewControler()/org.anotanota.framework.UIViewController", new DrawerVCProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.framework.drawer.NavigationDrawer$View()/android.widget.ListView", new DrawerViewProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.widget.TextView", new TextViewProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.Anotanota$OCRThread()/java.util.concurrent.ThreadPoolExecutor", new OcrThreadPoolProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.framework.drawer.NavigationDrawer$Layout()/android.support.v4.widget.DrawerLayout", new DrawerLayoutProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.Anotanota$Views$TabsFrame()/android.support.v4.view.ViewPager", new PagerViewProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.framework.App$MainViewController()/org.anotanota.framework.UIViewController", new MainViewControllerProvidesAdapter(module));
    bindings.contributeProvidesBinding("android.widget.ListView", new ListViewProvidesAdapter(module));
    bindings.contributeProvidesBinding("@org.anotanota.framework.drawer.NavigationDrawer$Titles()/java.util.List<java.lang.String>", new TitlesProvidesAdapter(module));
  }

  /**
   * A {@code Binding<org.anotanota.framework.UIViewController>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code org.anotanota.framework.UIViewController} and its
   * dependencies.
   *
   * Being a {@code Provider<org.anotanota.framework.UIViewController>} and handling creation and
   * preparation of object instances.
   */
  public static final class DrawerVCProvidesAdapter extends ProvidesBinding<org.anotanota.framework.UIViewController>
      implements Provider<org.anotanota.framework.UIViewController> {
    private final AnotanotaActivityModule module;
    private Binding<org.anotanota.framework.Application> app;
    private Binding<android.content.Context> context;
    private Binding<org.anotanota.framework.drawer.NavigationDrawerViewController> drawer;
    private Binding<java.util.List<org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule>> dataAccess;

    public DrawerVCProvidesAdapter(AnotanotaActivityModule module) {
      super("@org.anotanota.framework.drawer.NavigationDrawer$ViewControler()/org.anotanota.framework.UIViewController", NOT_SINGLETON, "org.anotanota.AnotanotaActivityModule", "drawerVC");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      app = (Binding<org.anotanota.framework.Application>) linker.requestBinding("org.anotanota.framework.Application", AnotanotaActivityModule.class, getClass().getClassLoader());
      context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", AnotanotaActivityModule.class, getClass().getClassLoader());
      drawer = (Binding<org.anotanota.framework.drawer.NavigationDrawerViewController>) linker.requestBinding("org.anotanota.framework.drawer.NavigationDrawerViewController", AnotanotaActivityModule.class, getClass().getClassLoader());
      dataAccess = (Binding<java.util.List<org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule>>) linker.requestBinding("java.util.List<org.anotanota.sqlite.SQLiteModule$SQLiteDataAccessModule>", AnotanotaActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(app);
      getBindings.add(context);
      getBindings.add(drawer);
      getBindings.add(dataAccess);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.framework.UIViewController>}.
     */
    @Override
    public org.anotanota.framework.UIViewController get() {
      return module.drawerVC(app.get(), context.get(), drawer.get(), dataAccess.get());
    }
  }

  /**
   * A {@code Binding<android.widget.ListView>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.widget.ListView} and its
   * dependencies.
   *
   * Being a {@code Provider<android.widget.ListView>} and handling creation and
   * preparation of object instances.
   */
  public static final class DrawerViewProvidesAdapter extends ProvidesBinding<android.widget.ListView>
      implements Provider<android.widget.ListView> {
    private final AnotanotaActivityModule module;
    private Binding<org.anotanota.framework.Activity> activity;

    public DrawerViewProvidesAdapter(AnotanotaActivityModule module) {
      super("@org.anotanota.framework.drawer.NavigationDrawer$View()/android.widget.ListView", NOT_SINGLETON, "org.anotanota.AnotanotaActivityModule", "drawerView");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      activity = (Binding<org.anotanota.framework.Activity>) linker.requestBinding("org.anotanota.framework.Activity", AnotanotaActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(activity);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.widget.ListView>}.
     */
    @Override
    public android.widget.ListView get() {
      return module.drawerView(activity.get());
    }
  }

  /**
   * A {@code Binding<android.widget.TextView>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.widget.TextView} and its
   * dependencies.
   *
   * Being a {@code Provider<android.widget.TextView>} and handling creation and
   * preparation of object instances.
   */
  public static final class TextViewProvidesAdapter extends ProvidesBinding<android.widget.TextView>
      implements Provider<android.widget.TextView> {
    private final AnotanotaActivityModule module;
    private Binding<org.anotanota.framework.Activity> activity;

    public TextViewProvidesAdapter(AnotanotaActivityModule module) {
      super("android.widget.TextView", NOT_SINGLETON, "org.anotanota.AnotanotaActivityModule", "textView");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      activity = (Binding<org.anotanota.framework.Activity>) linker.requestBinding("org.anotanota.framework.Activity", AnotanotaActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(activity);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.widget.TextView>}.
     */
    @Override
    public android.widget.TextView get() {
      return module.textView(activity.get());
    }
  }

  /**
   * A {@code Binding<java.util.concurrent.ThreadPoolExecutor>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<java.util.concurrent.ThreadPoolExecutor>} and handling creation and
   * preparation of object instances.
   */
  public static final class OcrThreadPoolProvidesAdapter extends ProvidesBinding<java.util.concurrent.ThreadPoolExecutor>
      implements Provider<java.util.concurrent.ThreadPoolExecutor> {
    private final AnotanotaActivityModule module;

    public OcrThreadPoolProvidesAdapter(AnotanotaActivityModule module) {
      super("@org.anotanota.Anotanota$OCRThread()/java.util.concurrent.ThreadPoolExecutor", IS_SINGLETON, "org.anotanota.AnotanotaActivityModule", "ocrThreadPool");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.util.concurrent.ThreadPoolExecutor>}.
     */
    @Override
    public java.util.concurrent.ThreadPoolExecutor get() {
      return module.ocrThreadPool();
    }
  }

  /**
   * A {@code Binding<android.support.v4.widget.DrawerLayout>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.support.v4.widget.DrawerLayout} and its
   * dependencies.
   *
   * Being a {@code Provider<android.support.v4.widget.DrawerLayout>} and handling creation and
   * preparation of object instances.
   */
  public static final class DrawerLayoutProvidesAdapter extends ProvidesBinding<android.support.v4.widget.DrawerLayout>
      implements Provider<android.support.v4.widget.DrawerLayout> {
    private final AnotanotaActivityModule module;
    private Binding<org.anotanota.framework.Activity> activity;

    public DrawerLayoutProvidesAdapter(AnotanotaActivityModule module) {
      super("@org.anotanota.framework.drawer.NavigationDrawer$Layout()/android.support.v4.widget.DrawerLayout", NOT_SINGLETON, "org.anotanota.AnotanotaActivityModule", "drawerLayout");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      activity = (Binding<org.anotanota.framework.Activity>) linker.requestBinding("org.anotanota.framework.Activity", AnotanotaActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(activity);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.support.v4.widget.DrawerLayout>}.
     */
    @Override
    public android.support.v4.widget.DrawerLayout get() {
      return module.drawerLayout(activity.get());
    }
  }

  /**
   * A {@code Binding<android.support.v4.view.ViewPager>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.support.v4.view.ViewPager} and its
   * dependencies.
   *
   * Being a {@code Provider<android.support.v4.view.ViewPager>} and handling creation and
   * preparation of object instances.
   */
  public static final class PagerViewProvidesAdapter extends ProvidesBinding<android.support.v4.view.ViewPager>
      implements Provider<android.support.v4.view.ViewPager> {
    private final AnotanotaActivityModule module;
    private Binding<org.anotanota.framework.Activity> activity;

    public PagerViewProvidesAdapter(AnotanotaActivityModule module) {
      super("@org.anotanota.Anotanota$Views$TabsFrame()/android.support.v4.view.ViewPager", NOT_SINGLETON, "org.anotanota.AnotanotaActivityModule", "pagerView");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      activity = (Binding<org.anotanota.framework.Activity>) linker.requestBinding("org.anotanota.framework.Activity", AnotanotaActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(activity);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.support.v4.view.ViewPager>}.
     */
    @Override
    public android.support.v4.view.ViewPager get() {
      return module.pagerView(activity.get());
    }
  }

  /**
   * A {@code Binding<org.anotanota.framework.UIViewController>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code org.anotanota.framework.UIViewController} and its
   * dependencies.
   *
   * Being a {@code Provider<org.anotanota.framework.UIViewController>} and handling creation and
   * preparation of object instances.
   */
  public static final class MainViewControllerProvidesAdapter extends ProvidesBinding<org.anotanota.framework.UIViewController>
      implements Provider<org.anotanota.framework.UIViewController> {
    private final AnotanotaActivityModule module;
    private Binding<MainViewController> controller;

    public MainViewControllerProvidesAdapter(AnotanotaActivityModule module) {
      super("@org.anotanota.framework.App$MainViewController()/org.anotanota.framework.UIViewController", NOT_SINGLETON, "org.anotanota.AnotanotaActivityModule", "mainViewController");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      controller = (Binding<MainViewController>) linker.requestBinding("org.anotanota.MainViewController", AnotanotaActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(controller);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<org.anotanota.framework.UIViewController>}.
     */
    @Override
    public org.anotanota.framework.UIViewController get() {
      return module.mainViewController(controller.get());
    }
  }

  /**
   * A {@code Binding<android.widget.ListView>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.widget.ListView} and its
   * dependencies.
   *
   * Being a {@code Provider<android.widget.ListView>} and handling creation and
   * preparation of object instances.
   */
  public static final class ListViewProvidesAdapter extends ProvidesBinding<android.widget.ListView>
      implements Provider<android.widget.ListView> {
    private final AnotanotaActivityModule module;
    private Binding<org.anotanota.framework.Activity> activity;

    public ListViewProvidesAdapter(AnotanotaActivityModule module) {
      super("android.widget.ListView", NOT_SINGLETON, "org.anotanota.AnotanotaActivityModule", "listView");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      activity = (Binding<org.anotanota.framework.Activity>) linker.requestBinding("org.anotanota.framework.Activity", AnotanotaActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(activity);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.widget.ListView>}.
     */
    @Override
    public android.widget.ListView get() {
      return module.listView(activity.get());
    }
  }

  /**
   * A {@code Binding<java.util.List<java.lang.String>>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code java.util.List<java.lang.String>} and its
   * dependencies.
   *
   * Being a {@code Provider<java.util.List<java.lang.String>>} and handling creation and
   * preparation of object instances.
   */
  public static final class TitlesProvidesAdapter extends ProvidesBinding<java.util.List<String>>
      implements Provider<java.util.List<String>> {
    private final AnotanotaActivityModule module;
    private Binding<java.util.List<org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule>> dataAccesses;

    public TitlesProvidesAdapter(AnotanotaActivityModule module) {
      super("@org.anotanota.framework.drawer.NavigationDrawer$Titles()/java.util.List<java.lang.String>", NOT_SINGLETON, "org.anotanota.AnotanotaActivityModule", "titles");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      dataAccesses = (Binding<java.util.List<org.anotanota.sqlite.SQLiteModule.SQLiteDataAccessModule>>) linker.requestBinding("java.util.List<org.anotanota.sqlite.SQLiteModule$SQLiteDataAccessModule>", AnotanotaActivityModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(dataAccesses);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<java.util.List<java.lang.String>>}.
     */
    @Override
    public java.util.List<String> get() {
      return module.titles(dataAccesses.get());
    }
  }
}
